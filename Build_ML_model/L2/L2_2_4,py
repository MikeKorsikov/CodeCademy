# Gradient Descent for Intercept

def get_gradient_at_b(x,y,m,b):
  diff = 0
  for i in range(0, len(x)):
    y_val = y[i]
    x_val = x[i]
    diff += (y_val - ((m * x_val) + b))
  b_gradient = - 2 / len(x) * diff
  return b_gradient

###

# Gradient Descent for Slope

def get_gradient_at_m(x,y,m,b):
  diff = 0

  for i in range(0, len(x)):
    y_val = y[i]
    x_val = x[i]
    diff += x_val * (y_val - (m * x_val + b))
    m_gradient = -2 / len(x) * diff
  return m_gradient


# 
def step_gradient(x,y, b_current, m_current):
  b_gradient  = get_gradient_at_b(x,y, b_current, m_current)
  m_gradient = get_gradient_at_m(x,y, b_current, m_current)
  b = b_current - (0.01 * b_gradient)
  m = m_current - (0.01 * m_gradient)
  return [b,m]

months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
revenue = [52, 74, 79, 95, 115, 110, 129, 126, 147, 146, 156, 184]

# current intercept guess:
b = 0
# current slope guess:
m = 0

# Call function to update b and m
b,m = step_gradient(months,revenue,b,m)
print(b, m)
